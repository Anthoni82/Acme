
//‚úîÔ∏èOPERADORES
// Elemento encargado de manipular los operandos. Junto a sus operandos conforman una expresion que da como resultado un valor.

//‚úîÔ∏èOPERADORES ARITMETICOS
// Son los operadores matematicos que de toda la vida conocemos [+ , - , * , / , %]. 
// Asimismo existen OPERADORES DE DECREMENTO E INCREMENTO.
let num1 = 1;
let num2 = 4;

/*1Ô∏è‚É£ PRE INCREMENTO*/        x++; //Equivalente a: x = x + 1 
/*2Ô∏è‚É£ POST INCREMENTO*/       ++x; //Equivalente a: x = x + 1                      
/*3Ô∏è‚É£ PRE DECREMENTO*/        x--; //Equivalente a: x = x - 1                               
/*4Ô∏è‚É£ POST DECREMENTO*/       --x; //Equivalente a: x = x - 1


//‚úîÔ∏èOPERADORES DE ASIGNACI√ìN
// Asignan valores a las variables u operando izquierdo, (üü∞). 
let x = 7;
let y = 12; 

/*1Ô∏è‚É£ ASIGNACI√ìN B√ÅSICA*/                                         x = y;
/*2Ô∏è‚É£ ASIGNACI√ìN DE ADICI√ìN*/                                     x += y; // Equivalente a: x = x + y
/*3Ô∏è‚É£ ASIGNACI√ìN DE RESTA*/                                       x -= y; // Equivalente a: x = x - y
/*4Ô∏è‚É£ ASIGNACI√ìN DE MULTIPLICACI√ìN*/                              x *= y; // Equivalente a: x = x * y
/*5Ô∏è‚É£ ASIGNACI√ìN DE DIVISI√ìN*/                                    x /= y; // Equivalente a: x = x / y
/*6Ô∏è‚É£ ASIGNACI√ìN DE RESIDUO*/                                     x %= y; // Equivalente a: x = x % y
/*7Ô∏è‚É£ ASIGNACI√ìN DE EXPONENTE*/                                   x **= y; // Equivalente a: x = x ** y
/*8Ô∏è‚É£ ASIGNACI√ìN DE DESPLAZAMIENTO A LA IZQUIERDA*/               x <<= y; // Equivalente a: x = x << y
/*9Ô∏è‚É£ ASIGNACI√ìN DE DESPLAZAMIENTO A LA DERECHA*/                 x >>= y; // Equivalente a: x = x >> y
/*üîü ASIGNACI√ìN DE DESPLAZAMIENTO A LA DERECHA SIN SIGNO*/      x >>>= y; // Equivalente a: x = x >>> y
/*1Ô∏è‚É£1Ô∏è‚É£ ASIGNACI√ìN AND BIT A BIT*/                                x &= y; // Equivalente a: x = x & y
/*1Ô∏è‚É£2Ô∏è‚É£ ASIGNACI√ìN XOR BIT A BIT*/                                x ^= y; // Equivalente a: x = x ^ y
/*1Ô∏è‚É£3Ô∏è‚É£ ASIGNACI√ìN OR BIT A BIT*/                                 x |= y; // Equivalente a: x = x | y
/*1Ô∏è‚É£4Ô∏è‚É£ ASIGNACI√ìN AND L√ìGICO*/                                   x &&= y; // Equivalente a: x = x && y
/*1Ô∏è‚É£5Ô∏è‚É£ ASIGNACI√ìN OR L√ìGICO*/                                    x ||= y; // Equivalente a: x = x || y
/*1Ô∏è‚É£6Ô∏è‚É£ ASIGNACI√ìN DE ANULACI√ìN*/                                 x ??= y; // Equivalente a: x = x ?? y


//‚úîÔ∏èOPERADORES DE COMPARACI√ìN
// Encargados de devolver un valor booleano TRUE[‚òëÔ∏è] or FALSE[‚ùé], aceptando operandos num√©ricos, de cadena, l√≥gicos u objetos... 
let z = 3;
let w = 4; 

/*1Ô∏è‚É£ IGUAL*/                   z == w; // Devuelven {true} si los operadores son iguales 
/*2Ô∏è‚É£ NO ES IGUAL*/             z != w; // Devuelve {true} si los operadores no son iguales 
/*3Ô∏è‚É£ ESTRICTAMENTE IGUAL*/     x === y; // Devuelve {true} si los operadores son iguales y del mismo tipo
/*4Ô∏è‚É£ DESIGUALDAD ESTRICTA*/    x !== y; // Devuelve {true} si los operadores no son iguales y son de diferente tipo 
/*5Ô∏è‚É£ MAYOR QUE*/               x > y; // Devuelve {true} si el operando izquierdo es mayor que el derecho
/*6Ô∏è‚É£ MAYOR O IGUAL QUE*/       x >= y; // Devuelve {true} si el operando izquierdo es mayor o igual que el derecho
/*7Ô∏è‚É£ MENOR QUE*/               x < y; // Devuelve {true} si el operando izquierdo es menor que el derecho 
/*8Ô∏è‚É£ MENOR O IGUAL QUE*/       x <= y; // Devuelve {true} si el operando izquierdo es menor o igual que el derecho

//‚úîÔ∏èOPERADORES LOGICOS
//Son utilizados para obtener booleanos, son el equivalente a las tablas de verdades.
let bool_1 = true;
let bool_2 = false;

/*1Ô∏è‚É£ AND LOGICO*/     bool_1 && bool_2 //Devuelve {true} si ambos valores son {true} 
/*2Ô∏è‚É£ OR LOGICO*/      bool_1 || bool_2 //Devuelve {true} si alguno de los dos es {true}
/*3Ô∏è‚É£ NOT LOGICO*/     !bool_1 //Sirve para negar el booleano

//‚úîÔ∏èOPERADOR TERNIARIO
// Se evalua como una condicion equivalente a un if {} else {}.
var status = age >= 18 ? "adult" : "minor";

//‚úîÔ∏èOPERADOR UNITARIO DELETE
// Elimina propiedades de objetos.
delete object.property;
delete object[propertyKey];
delete objectName[index];
delete property; // legal solo dentro de una declaraci√≥n with

//‚ùóNOTA: devuelve true si la operaci√≥n es posible; devuelve false si la operaci√≥n no es posible.

//‚úîÔ∏èOPERADOR DE RELACION IN
// El operador in devuelve true si la propiedad especificada est√° en el objeto especificado. La sintaxis es:
propNameOrNumber in objectName; //Devuelve true si dicha propNameOrNumber se encuentra en el objeto.
                                //Es util tambien para recorrer Arrays.



//‚úîÔ∏èESTRUCTURAS DE CONTROL